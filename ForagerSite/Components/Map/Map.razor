@page "/map"

@using Newtonsoft.Json
@using ForagerSite.Services
@using DataAccess.Models
@using Utilities
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration config
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService
@inject MapService mapService


<div>
    <h4>Search</h4>
    <div id="search-container" style="display: flex; gap: 20px;">
        <div id="filter-buttons" class="mb-3" >
            <button id="get-all-finds" class="btn btn-primary btn-lg mr-2" @onclick="GetAllFinds">All Finds</button>
            <button id="get-my-finds" class="btn btn-primary btn-lg mr-2" @onclick="GetMyFinds">My Finds</button>
            <button id="get-friends-finds" class="btn btn-primary btn-lg">Friend's Finds</button>
        </div>
        
      <div>
        <div>
            <label>
                <InputCheckbox @bind-Value="isAdvancedSearchVisible" @onchange="OnAdvancedSearchToggled" />
                Advanced Search
            </label>
        </div>
        @if (isAdvancedSearchVisible)
        {            
            <div id="advanced-search-container" style="display: flex; gap: 20px;">
                <div class="mb-3">
                    <label for="species-dropdown">Species Type</label>
                    <select id="species-dropdown" class="form-control" @bind="selectedSpeciesType">
                        <option value="">Select an option</option>
                        <option value="Tree">Tree</option>
                        <option value="Mushroom">Mushroom</option>
                        <option value="Fruit">Fruit</option>
                        <option value="Herb">Herb</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="use-category-dropdown">Use Category</label>
                    <select id="use-category-dropdown" class="form-control" @bind="selectedUseCategory">
                        <option value="">Select an option</option>
                        <option value="Medicinal">Medicinal</option>
                        <option value="Gourmet">Gourmet</option>
                        <option value="Crafting">Crafting</option>
                    </select>
                </div>
                <div id="user-search-container">
                    <label for="user-search">Search by user</label>
                    <InputText id="user-search" 
                        @bind-Value="userSearchTerm" 
                        placeholder="Search..." 
                        class="form-control" 
                        @oninput="UserSearchInputChanged" />

                    @if (filteredUserResults.Any()) 
                    {
                        <ul id="results-dropdown" class="dropdown-menu show" style="display: block;">
                            @foreach (var result in filteredUserResults)
                            {
                                <li class="dropdown-item" @onclick="() => SelectUserSearchResult(result)">
                                    @result
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div id="find-search-container">
                    <label for="find-search">Search by keyword</label>
                    <InputText id="find-search"
                        @bind-Value="findSearchTerm"
                        placeholder="Search..."
                        class="form-control"
                        @oninput="FindSearchInputChanged" />
                </div>
                <button id="advanced-search-button" class="btn btn-primary mt-3" @onclick="GetFindsBySearch">Search</button>
            </div>           
        }
        </div>
    </div>

    <div id="map-container" style="display: flex; height: 800px;">
        @* <div id="map" style="height: 800px; width: 100%;"></div> *@
        <div id="map" style="flex: 2; height: 100%;"></div>

        <div id="finds-grid" style="flex: 1; overflow-y: auto; border: 1px solid #ccc; background-color: #f9f9f9;">
        @if (isLoading)
        {
            <div class="loading-indicator">
                <p>Loading...</p>
            </div>
        }
        else if (mapService.CurrentViewModels != null && mapService.CurrentViewModels.Any())
        {
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr style="background-color: #e2e2e2; position: sticky; top: 0;">
                        <th style="padding: 10px; border-bottom: 1px solid #ddd;">Find Name</th>
                        <th style="padding: 10px; border-bottom: 1px solid #ddd;"></th>
                        <th style="padding: 10px; border-bottom: 1px solid #ddd;">Species</th>
                        <th style="padding: 10px; border-bottom: 1px solid #ddd;">User</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vm in mapService.CurrentViewModels)
                    {
                        foreach (var find in vm.finds)
                        {                                                          
                            <tr style="cursor: pointer;" @onclick="() => ToggleRowExpansion(find)" class="@GetRowClass(find)">
                            <td style="padding: 10px; border-bottom: 1px solid #ddd;">@find.findName</td>
                                @if (find.UserImages != null && find.UserImages.Any())
                                {
                                    <td><img src="@find.UserImages.FirstOrDefault().ImageData" style="max-width: 100px;" /></td>
                                }
                                else
                                {
                                    <td>No image available</td> <!-- or any fallback content -->
                                }
                            <td style="padding: 10px; border-bottom: 1px solid #ddd;">@find.SpeciesType</td>
                            <td style="padding: 10px; border-bottom: 1px solid #ddd;">Discovered by: @vm.userName</td>
                        </tr>
                            @if (IsRowExpanded(find))
                            {
                                <tr>
                                    <td colspan="4" style="padding: 10px; border-bottom: 1px solid #ddd;">
                                        <div style="padding-left: 20px;">
                                            <p><strong>Discovered: </strong><span>@find.findDate.ToString("MMMM dd, yyyy")</span></p>
                                            <p><strong>Species Name: </strong><span>@find.SpeciesName</span></p>
                                            <p><strong>Species Category: </strong><span>@find.useCategory</span></p>
                                            <p><strong>Distinguishing Features: </strong><span>@find.features</span></p>
                                            <p><strong>Dangerous Lookalikes: </strong><span>@find.lookAlikes</span></p>
                                            <p><strong>Harvest Method: </strong><span>@find.harvestMethod</span></p>
                                            <p><strong>Tastes like: </strong><span>@find.tastesLike</span></p>
                                            <p><strong>Notes: </strong><span>@find.description</span></p>
                                            <p><a href="#" @onclick="() => ViewOnMap(vm.userId, find.findId)">View on map</a></p>
                                            <div>
                                                <p><span>Thumbs up</span></p>
                                                <p><span>Thumbs down</span></p>
                                            </div>
                                            <div>
                                                <p><span>Comments</span></p>
                                                <table>
                                                    <tbody>
                                                        <!-- Render comments here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="no-data-indicator">
                <p>No data available.</p>
            </div>
        }
        </div>
    </div>
</div>

<div id="find-form-container" style="display: none;">
    <form id="UserFindForm">
        <label for="findName">Name:</label>
        <input type="text" id="UsfName" name="findName"><br>

        <label for="speciesName">Species Name:</label>
        <input type="text" id="UsfSpeciesName" name="speciesName"><br>

        <label for="imageUpload">Images:</label>
        <input type="file" class="form-control" id="imageUpload" name="imageUpload" multiple accept=".png, .jpg, .jpeg" ><br>
        <div id="imagePreview" style="margin-top: 5px;"></div>

        <label for="speciesType">Species Type:</label>
        <select id="UsfSpeciesType" class="dropdown-item"name="speciesType" >
            <option value="tree">Tree</option>
            <option value="mushroom">Mushroom</option>
            <option value="fruit">Fruit</option>
            <option value="herb">Herb</option>
        </select>

        <label for="useCategory">Use Category:</label>
        <select id="UsfUseCategory" class="dropdown-item" name="useCategory">
            <option value="medicinal">Medicinal</option>
            <option value="gourmet">Gourmet</option>
            <option value="crafting">Crafting</option>
        </select>

        <label for="features">Distinguishing Features:</label>
        <input type="text" id="UsfFeatures" name="features"><br>

        <label for="lookalikes">Dangerous Lookalikes:</label>
        <input type="text" id="UsfLookAlikes" name="lookalikes"><br>

        <label for="harvestMethod">Harvest Method:</label>
        <input type="text" id="UsfHarvestMethod" name="harvestMethod"><br>

        <label for="tastesLike">Tastes Like:</label>
        <input type="text" id="UsfTastesLike" name="tastesLike"><br>

        <label for="description">Notes:</label>
        <input type="text" id="UsfDescription" name="description"><br>

        <button type="button" id="saveButton" >Save</button>
    </form>
</div>

<div id="update-form-container" style="display: none;">
    <form id="UpdateFindForm">
        <label for="findName">Name:</label>
        <input type="text" id="UsfName" name="findName" value=""><br>

        <label for="speciesName">Species Name:</label>
        <input type="text" id="UsfSpeciesName" name="speciesName" value=""><br>

        <div id="existingImageGallery">

        </div>

        <label for="imageUpload">Add Images:</label>
        <input type="file" id="imageUpload" multiple accept="image/*"><br>
        <div id="newImagePreview"></div> 

        <label for="speciesType">Species Type:</label>
        <select id="UsfSpeciesType" class="dropdown-item" name="speciesType">
            <option value="tree">Tree</option>
            <option value="mushroom">Mushroom</option>
            <option value="fruit">Fruit</option>
            <option value="herb">Herb</option>
        </select>

        <label for="useCategory">Use Category:</label>
        <select id="UsfUseCategory" class="dropdown-item" name="useCategory">
            <option value="medicinal">Medicinal</option>
            <option value="gourmet">Gourmet</option>
            <option value="crafting">Crafting</option>
        </select>

        <label for="features">Distinguishing Features:</label>
        <input type="text" id="UsfFeatures" name="features" value=""><br>

        <label for="lookalikes">Dangerous Lookalikes:</label>
        <input type="text" id="UsfLookAlikes" name="lookalikes" value=""><br>

        <label for="harvestMethod">Harvest Method:</label>
        <input type="text" id="UsfHarvestMethod" name="harvestMethod" value=""><br>

        <label for="tastesLike">Tastes Like:</label>
        <input type="text" id="UsfTastesLike" name="tastesLike" value=""><br>

        <label for="description">Notes:</label>
        <input type="text" id="UsfDescription" name="description" value=""><br>

        <button type="button" id="updateButton">Save</button>
    </form>
</div>

<div id="find-popup-template" style="display: none;">
    <p><strong>Name:</strong> {UsfName}</p>
    <p><strong>Discovered by:</strong> {UssUsername}</p>
    <p><strong>Species Name:</strong> {UsfSpeciesName}</p>
    <div id="photo-gallery">
        {Images}
    </div>
    @* <p><strong>Discovered:</strong> {Date}</p> *@
    <p><strong>Species Type:</strong> {UsfSpeciesType}</p>
    <p><strong>Use Category:</strong> {UsfUseCategory}</p>
    <p><strong>Distinguishing Features:</strong> {UsfFeatures}</p>
    <p><strong>Dangerous Lookalikes:</strong> {UsfLookAlikes}</p>
    <p><strong>Harvest Method:</strong> {UsfHarvestMethod}</p>
    <p><strong>Tastes Like:</strong> {UsfTastesLike}</p>
    <p><strong>Notes:</strong> {UsfDescription}</p>
    <div style="display: flex; 10px">
        <button type="button" id="details-button" class="form-control">View Details</button>
        <button type="button" id="edit-button" class="form-control">Edit</button>
        <button type="button" id="delete-button" class="form-control">Delete</button>
    </div>
</div>

<div></div>

@code {

    private DotNetObjectReference<MapService> _mapServiceReference;

    private List<string> filteredUserResults = new List<string>();

    private string selectedSpeciesType = string.Empty;

    private string selectedUseCategory = string.Empty;

    private string userSearchTerm = string.Empty;

    private string findSearchTerm = string.Empty;

    private bool isAdvancedSearchVisible = false;

    private Dictionary<UserFind, bool> expandedRows = new Dictionary<UserFind, bool>();

    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = userStateService.CurrentUser.user;

            if (user != null)
            {
                isLoading = true;
                try
                {
                    _mapServiceReference = DotNetObjectReference.Create(mapService);
                    mapService.CurrentViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
                    mapService.MyViewModels = VmUtilities.Copy(mapService.CurrentViewModels);

                    var json = JsonConvert.SerializeObject(mapService.CurrentViewModels, new JsonSerializerSettings
                        {
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                            Formatting = Formatting.Indented
                        });

                    await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapService.mapFilter, user.UserSecurity.UssUsername);
                    await JSRuntime.InvokeVoidAsync("setDotNetObjectReference", _mapServiceReference);
                }
                finally
                {
                    isLoading = false;
                }
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        mapService.OnChange += StateHasChanged;
        mapService.OnLoadingChange += ViewDetails;
    }

    private void ViewDetails(bool loading)
    {
        isLoading = loading;
        try
        {
            if (mapService.CurrentViewModels[0].finds[0] != null)
            {
                ToggleRowExpansion(mapService.CurrentViewModels[0].finds[0]);
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error viewing details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private void OnAdvancedSearchToggled(ChangeEventArgs e)
    {
        if (!isAdvancedSearchVisible)
        {
            ClearAdvancedSearchFields();
        }
    }

    private void ClearAdvancedSearchFields()
    {
        selectedSpeciesType = string.Empty;
        selectedUseCategory = string.Empty;
        userSearchTerm = string.Empty;
        findSearchTerm = string.Empty;
        filteredUserResults.Clear();
    }

    private async Task UserSearchInputChanged(ChangeEventArgs e)
    {
        userSearchTerm = e.Value?.ToString().ToLower() ?? string.Empty;

        // Only search if input is not empty
        if (!string.IsNullOrEmpty(userSearchTerm))
        {
            await FilterResults();
        }
        else
        {
            filteredUserResults.Clear(); // Clear the results when input is empty
        }

        StateHasChanged(); // Ensure the UI updates
    }

    private async Task FilterResults()
    {
        var userNames = await userService.GetAllUserNames();
        filteredUserResults = userNames
        .Where(u => u.StartsWith(userSearchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    }

    private void SelectUserSearchResult(string result)
    {
        userSearchTerm = result; 
        filteredUserResults.Clear(); 
        StateHasChanged(); 
    }

    private void FindSearchInputChanged(ChangeEventArgs e)
    {
        findSearchTerm = e.Value?.ToString() ?? string.Empty;
    }

    private async Task GetMyFinds()
    {
        var user = userStateService.CurrentUser.user;

        if (user != null)
        {
            mapService.mapFilter = "UserOnly";
            mapService.CurrentViewModels = VmUtilities.Copy(mapService.MyViewModels);

            var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };

            var json = JsonConvert.SerializeObject(mapService.CurrentViewModels, settings);
            await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapService.mapFilter, user.UserSecurity.UssUsername);
        }
    }

    private async Task GetAllFinds() // To Do - logic to filter AllViewmodels by map zoom radius to reduce load time
    {
        var user = userStateService.CurrentUser.user;
        mapService.mapFilter = "AllUsers";

        isLoading = true;
        try
        {
            if (!mapService.AllViewModels.Any()) //AllViewModels hasn't been set - make sql call
            {
                try
                {
                    mapService.AllViewModels = await userFindService.GetUserFindsViewModels();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching ViewModels: {ex.Message}");
                }
            }
            var settings = new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                    Formatting = Formatting.Indented
                };
            mapService.CurrentViewModels = VmUtilities.Copy(mapService.AllViewModels);

            var json = JsonConvert.SerializeObject(mapService.CurrentViewModels, settings);
            await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapService.mapFilter, user.UserSecurity.UssUsername);
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private async Task GetFindsBySearch()
    {
        var user = userStateService.CurrentUser.user;

        var settings = new JsonSerializerSettings
        {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
            Formatting = Formatting.Indented
        };

        if (mapService.mapFilter == "UserOnly")
        {
            mapService.CurrentViewModels = VmUtilities.Copy(mapService.MyViewModels);
        }
        else if (mapService.mapFilter == "AllUsers")
        {
            mapService.CurrentViewModels = VmUtilities.Copy(mapService.AllViewModels);
        }
        if (!string.IsNullOrEmpty(userSearchTerm))
        {
            mapService.CurrentViewModels = mapService.CurrentViewModels
            .Where(f => f.userName
                .Contains(userSearchTerm)).ToList();
        }
        if (!string.IsNullOrEmpty(selectedSpeciesType)
        || !string.IsNullOrEmpty(selectedUseCategory)
        || !string.IsNullOrEmpty(findSearchTerm))
        {
            foreach (var vm in mapService.CurrentViewModels)
            {
                vm.finds = vm.finds
                .Where(f =>
                    (string.IsNullOrEmpty(selectedSpeciesType) ||
                     f.SpeciesType.Equals(selectedSpeciesType, StringComparison.OrdinalIgnoreCase))
                    && (string.IsNullOrEmpty(selectedUseCategory) ||
                        f.useCategory.Equals(selectedUseCategory, StringComparison.OrdinalIgnoreCase))
                    && (string.IsNullOrEmpty(findSearchTerm) ||
                        f.findName.Contains(findSearchTerm, StringComparison.OrdinalIgnoreCase))
                )
                .ToList();

                var validFindIds = vm.finds.Select(f => f.findId).ToList();
                var filteredLocations = new List<UserFindLocation>();

                foreach (Guid id in validFindIds)
                {
                    var matchingLocation = vm.findLocations
                        .FirstOrDefault(loc => loc.locFindId == id);

                    if (matchingLocation != null)
                    {
                        filteredLocations.Add(matchingLocation);
                    }
                }
                vm.findLocations = filteredLocations;
            }
        }
        var json = JsonConvert.SerializeObject(mapService.CurrentViewModels, settings);
        await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapService.mapFilter);

        selectedSpeciesType = string.Empty;
        selectedUseCategory = string.Empty;
        userSearchTerm = string.Empty;
        findSearchTerm = string.Empty;
        filteredUserResults.Clear();
    }

    private bool userFindsExpanded;

    private void ToggleRowExpansion(UserFind item)
    {
        if (expandedRows.ContainsKey(item))
        {
            expandedRows[item] = !expandedRows[item];
        }
        else
        {
            expandedRows[item] = true;
        }
    }

    private bool IsRowExpanded(UserFind item)
    {
        return expandedRows.ContainsKey(item) && expandedRows[item];
    }

    private string GetRowClass(UserFind item)
    {
        return IsRowExpanded(item) ? "expanded" : "";
    }

    private async Task ViewOnMap(Guid userId, Guid findId)
    {
        var ufvm = mapService.CurrentViewModels
            .FirstOrDefault(u => u.userId == userId);

        var uf = ufvm.finds
            .FirstOrDefault(f => f.findId == findId);

        var location = ufvm.findLocations
            .FirstOrDefault(l => l.locFindId == uf.findId);

        double latitude = location.latitude;
        double longitude = location.longitude;

        await JSRuntime.InvokeVoidAsync("centerMapOnFind", latitude, longitude);
    }

    public void Dispose()
    {
        _mapServiceReference?.Dispose();
        mapService.OnChange -= StateHasChanged;
        mapService.OnLoadingChange -= ViewDetails;
    }



}


