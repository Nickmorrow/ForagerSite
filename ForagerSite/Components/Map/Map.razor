@page "/map"

@using Newtonsoft.Json
@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService
@inject IConfiguration config


<div id="map" style="height: 500px; width: 100%;"></div>

@* <EditForm Model="_userFindsViewModels[0]">

</EditForm>

<InputFile OnChange="@_LoadFiles" class="form-control" multiple accept=".png, .jpg, .jpeg" /> *@

<div id="filters">
    <button size="100px" id="get-all-finds" class="btn-primary" @onclick="_GetAllFinds"></button>
    <button id="get-my-finds" class="btn-primary" @onclick="_GetMyFinds"></button>
    <button id="get-friends-finds" class="btn-primary"></button>
</div>


<div id="find-form-container" style="display: none;">
    <form id="UserFindForm">
        <label for="findName">Name:</label>
        <input type="text" id="UsfName" name="findName"><br>

        <label for="speciesName">Species Name:</label>
        <input type="text" id="UsfSpeciesName" name="speciesName"><br>

        <label for="imageUpload">Images:</label>
        <input type="file" class="form-control" id="imageUpload" name="imageUpload" multiple accept=".png, .jpg, .jpeg" ><br>
        <div id="imagePreview" style="margin-top: 5px;"></div>

        <label for="speciesType">Species Type:</label>
        <select id="UsfSpeciesType" class="dropdown-item"name="speciesType" >
            <option value="tree">Tree</option>
            <option value="mushroom">Mushroom</option>
            <option value="fruit">Fruit</option>
            <option value="herb">Herb</option>
        </select>

        <label for="useCategory">Use Category:</label>
        <select id="UsfUseCategory" class="dropdown-item" name="useCategory">
            <option value="medicinal">Medicinal</option>
            <option value="gourmet">Gourmet</option>
            <option value="crafting">Crafting</option>
        </select>

        <label for="features">Distinguishing Features:</label>
        <input type="text" id="UsfFeatures" name="features"><br>

        <label for="lookalikes">Dangerous Lookalikes:</label>
        <input type="text" id="UsfLookAlikes" name="lookalikes"><br>

        <label for="harvestMethod">Harvest Method:</label>
        <input type="text" id="UsfHarvestMethod" name="harvestMethod"><br>

        <label for="tastesLike">Tastes Like:</label>
        <input type="text" id="UsfTastesLike" name="tastesLike"><br>

        <label for="description">Notes:</label>
        <input type="text" id="UsfDescription" name="description"><br>

        <button type="button" id="saveButton" >Save</button>
    </form>
</div>

<div id="update-form-container" style="display: none;">
    <form id="UpdateFindForm">
        <label for="findName">Name:</label>
        <input type="text" id="UsfName" name="findName" value=""><br>

        <label for="speciesName">Species Name:</label>
        <input type="text" id="UsfSpeciesName" name="speciesName" value=""><br>

        <label for="speciesType">Species Type:</label>
        <select id="UsfSpeciesType" class="dropdown-item" name="speciesType">
            <option value="tree">Tree</option>
            <option value="mushroom">Mushroom</option>
            <option value="fruit">Fruit</option>
            <option value="herb">Herb</option>
        </select>

        <label for="useCategory">Use Category:</label>
        <select id="UsfUseCategory" class="dropdown-item" name="useCategory">
            <option value="medicinal">Medicinal</option>
            <option value="gourmet">Gourmet</option>
            <option value="crafting">Crafting</option>
        </select>

        <label for="features">Distinguishing Features:</label>
        <input type="text" id="UsfFeatures" name="features" value=""><br>

        <label for="lookalikes">Dangerous Lookalikes:</label>
        <input type="text" id="UsfLookAlikes" name="lookalikes" value=""><br>

        <label for="harvestMethod">Harvest Method:</label>
        <input type="text" id="UsfHarvestMethod" name="harvestMethod" value=""><br>

        <label for="tastesLike">Tastes Like:</label>
        <input type="text" id="UsfTastesLike" name="tastesLike" value=""><br>

        <label for="description">Notes:</label>
        <input type="text" id="UsfDescription" name="description" value=""><br>

        <button type="button" id="updateButton">Save</button>
    </form>
</div>

<div id="find-popup-template" style="display: none;">
    <p><strong>Name:</strong> {UsfName}</p>
    <p><strong>Discovered by:</strong> {UssUsername}</p>
    <p><strong>Species Name:</strong> {UsfSpeciesName}</p>
    <div id="photo-gallery">
        {Images}
    </div>
    <p><strong>Species Type:</strong> {UsfSpeciesType}</p>
    <p><strong>Use Category:</strong> {UsfUseCategory}</p>
    <p><strong>Distinguishing Features:</strong> {UsfFeatures}</p>
    <p><strong>Dangerous Lookalikes:</strong> {UsfLookAlikes}</p>
    <p><strong>Harvest Method:</strong> {UsfHarvestMethod}</p>
    <p><strong>Tastes Like:</strong> {UsfTastesLike}</p>
    <p><strong>Notes:</strong> {UsfDescription}</p>
    <button type="button" class="edit-button">Edit</button>
    <button type="button" class="delete-button">Delete</button>
</div>



@code {

    private static Map _instance;

    private List<UserFindLocation> _userFindLocations;

    private List<UserFindsViewModel> _userFindsViewModels;

    private const long _maxFileSize = 1024 * 1024 * 3; //3mb

    private const int _maxAllowedFiles = 4;

    private List<string> _errors = new();

    static readonly List<string> MapFilters = new List<string>
    {
        "UserOnly", "AllUsers", "FriendUsers"
    };

    public string mapFilter = MapFilters[0];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = userStateService.CurrentUser.user;

            if (user != null)
            {
                _userFindsViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
                var json = JsonConvert.SerializeObject(_userFindsViewModels, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        Formatting = Formatting.Indented
                    });

                await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapFilter, user.UserSecurity.UssUsername);
            }
        }
    }

    private async Task _GetMyFinds()
    {
        var user = userStateService.CurrentUser.user;

        mapFilter = MapFilters[0];

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };
        if (user != null)
        {
            _userFindsViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
            var json = JsonConvert.SerializeObject(_userFindsViewModels, settings);

            await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapFilter);
        }

    }

    private async Task _GetAllFinds()
    {

        mapFilter = MapFilters[1];

        var user = userStateService.CurrentUser.user;

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };

        _userFindsViewModels = await userFindService.GetUserFindsViewModels();

        var json = JsonConvert.SerializeObject(_userFindsViewModels, settings);

        await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString(), mapFilter);
    }

    private async Task _LoadFiles(InputFileChangeEventArgs e)
    {
        _errors.Clear();

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();

        var userName = userStateService.CurrentUser.userSecurity.UssUsername;

        if (e.FileCount > _maxAllowedFiles)
        {
            _errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {_maxAllowedFiles} files are allowed");
            return;
        }
        foreach(var file in e.GetMultipleFiles(_maxAllowedFiles)) // may not work once deployed
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

                string path = Path.Combine(config.GetValue<string>("FileStorage"), userName, newFileName);

                Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage"), userName));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(_maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                _errors.Add($"File: {file.Name} Error: {ex.Message}"); // add logic to encode filename for security
                throw;
            }
        }
    }

    [JSInvokable]
    public static async Task<UserFind> GetFindById(string findId)
    {
        if (string.IsNullOrEmpty(findId) || !Guid.TryParse(findId, out var guidId))
        {
            throw new ArgumentException($"Invalid GUID format, Received findId: {findId}");
        }

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        return await userFindService.GetFindById(guidId);
    }

    [JSInvokable]
    public static async Task<string> CreateFind(
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng,
    string mapFilter,
    List<string> uploadedFileUrls)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();

        var user = userStateService.CurrentUser.user;

        Guid userId = user.UsrId;

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        await userFindService.CreateFind(
            userId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng,
            uploadedFileUrls
        );

        var updatedViewModels = new List<UserFindsViewModel>();

        if (mapFilter == "UserOnly")
        {
            updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
        }
        if (mapFilter == "AllUsers")
        {
            updatedViewModels = await userFindService.GetUserFindsViewModels();
        }


        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

        return JsonConvert.SerializeObject(updatedViewModels, settings);
    }


    [JSInvokable]
    public static async Task<string> UpdateFind(
    string findId, 
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng,
    string mapFilter)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        Guid findGuid;
        if (Guid.TryParse(findId, out findGuid))
        {
            await userFindService.UpdateFind(
                findGuid,
                name,
                speciesName,
                speciesType,
                useCategory,
                features,
                lookalikes,
                harvestMethod,
                tastesLike,
                description,
                lat,
                lng
            );
           
            var updatedViewModels = new List<UserFindsViewModel>();

            if (mapFilter == "UserOnly")
            {
                updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
            }
            if (mapFilter == "AllUsers")
            {
                updatedViewModels = await userFindService.GetUserFindsViewModels();
            }

            var settings = new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                };

            return JsonConvert.SerializeObject(updatedViewModels, settings);
        }
        else
        {
            throw new ArgumentException("Invalid GUID format", nameof(findId));
        }
    }


    [JSInvokable]
    public static async Task<string> DeleteFind(string findId, string mapFilter)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        Guid findGuid;

        if (Guid.TryParse(findId, out findGuid))
            await userFindService.DeleteFind(findGuid);                              

        var updatedViewModels = new List<UserFindsViewModel>();

        if (mapFilter == "UserOnly")
        {
            updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
        }
        if (mapFilter == "AllUsers")
        {
            updatedViewModels = await userFindService.GetUserFindsViewModels();
        }

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

        return JsonConvert.SerializeObject(updatedViewModels, settings);
    }




}


