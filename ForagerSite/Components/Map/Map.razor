@page "/map"

@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService

<div id="map" style="height: 500px; width: 100%;"></div>

@code {
    private async Task InitializeMap()
    {
        await JSRuntime.InvokeVoidAsync("initializeMap");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
        }
    }

    [JSInvokable]
    public static async Task SaveFind(
           string Name,
           string SpeciesName,
           string SpeciesType,
           string UseCategory,
           string Features,
           string Lookalikes,
           string HarvestMethod,
           string TastesLike,
           string Description,
           float Latitude,
           float Longitude)
    {
        
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userService = ServiceLocator.ServiceProvider.GetService<UserService>();

        if (userStateService == null || userService == null)
        {
            throw new InvalidOperationException("Services are not available.");
        }

        var user = userStateService.CurrentUser.user;

        if (user != null)
        {
            var userFind = new UserFind
                {
                    UsfName = Name,
                    UsfUsrId = user.UsrId,
                    UsfFindDate = DateTime.Now,
                    UsfSpeciesName = SpeciesName,
                    UsfSpeciesType = SpeciesType,
                    UsfUseCategory = UseCategory,
                    UsfFeatures = Features,
                    UsfLookAlikes = Lookalikes,
                    UsfHarvestMethod = HarvestMethod,
                    UsfTastesLike = TastesLike,
                    UsfDescription = Description
                };

            var userFindLocation = new UserFindLocation
                {
                    UslUsfId = userFind.UsFId,
                    UslLatitude = Latitude,
                    UslLongitude = Longitude
                };

            await userService.AddUserFind(userFind, userFindLocation);
        }
    }

    [JSInvokable]
    public static async Task EditFind(
        string Name,
        string SpeciesName,
        string SpeciesType,
        string UseCategory,
        string Features,
        string Lookalikes,
        string HarvestMethod,
        string TastesLike,
        string Description,
        float Latitude,
        float Longitude)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userService = ServiceLocator.ServiceProvider.GetService<UserService>();

        var user = userStateService.CurrentUser.user;

        if (user != null)
        {
            var userFind = new UserFind
                {
                    UsfName = Name,
                    UsfUsrId = user.UsrId,                    
                    UsfSpeciesName = SpeciesName,
                    UsfSpeciesType = SpeciesType,
                    UsfUseCategory = UseCategory,
                    UsfFeatures = Features,
                    UsfLookAlikes = Lookalikes,
                    UsfHarvestMethod = HarvestMethod,
                    UsfTastesLike = TastesLike,
                    UsfDescription = Description
                };

            var userFindLocation = new UserFindLocation
                {
                    UslLatitude = Latitude,
                    UslLongitude = Longitude
                };

            await userService.UpdateUserFind(userFind, userFindLocation);
        }
    }

    [JSInvokable]
    public static string GetCurrentUsername()
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userService = ServiceLocator.ServiceProvider.GetService<UserService>();

        return userStateService.CurrentUser.user?.UsrName;
    }

}


