@page "/map"

@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService

<div id="map" style="height: 500px; width: 100%;"></div>

@code {

    private static Map _instance;

    private List<UserFindLocation> userFindLocations;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = userStateService.CurrentUser.user;
            if (user != null)
            {
                userFindLocations = await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
                await InitializeMap(userFindLocations);
            }
        }
    }

    private async Task InitializeMap(List<UserFindLocation> userFindLocations)
    {
        await JSRuntime.InvokeVoidAsync("initializeMap", userFindLocations);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> GetUserFindsAndLocations()
    {

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();

        var user = userStateService.CurrentUser.user;

        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);     

    }

    [JSInvokable]
    public static async Task<UserFind> GetFindById(string findId)
    {
        if (string.IsNullOrEmpty(findId) || !Guid.TryParse(findId, out var guidId))
        {
            throw new ArgumentException($"Invalid GUID format, Received findId: {findId}");
        }

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        return await userFindService.GetFindById(guidId);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> CreateFind(
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();

        var user = userStateService.CurrentUser.user;

        Guid userId = user.UsrId;

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        await userFindService.CreateFind(
            userId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng
        );              

        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> UpdateFind(
        Guid findId,
        string name,
        string speciesName,
        string speciesType,
        string useCategory,
        string features,
        string lookalikes,
        string harvestMethod,
        string tastesLike,
        string description,
        double lat,
        double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();       
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        await userFindService.UpdateFind(
            findId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng
        );
        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
    }


    // [JSInvokable]
    // public static async Task<SaveFindResult> SaveFind(
    //        string Name,
    //        string SpeciesName,
    //        string SpeciesType,
    //        string UseCategory,
    //        string Features,
    //        string Lookalikes,
    //        string HarvestMethod,
    //        string TastesLike,
    //        string Description,
    //        float Latitude,
    //        float Longitude)
    // {
        
    //     var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
    //     var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();

    //     if (userStateService == null || userFindService == null)
    //     {
    //         throw new InvalidOperationException("Services are not available.");
    //     }

    //     var user = userStateService.CurrentUser.user;

    //     if (user != null)
    //     {
    //         var userFind = new UserFind
    //             {
    //                 UsfName = Name,
    //                 UsfUsrId = user.UsrId,
    //                 UsfFindDate = DateTime.Now,
    //                 UsfSpeciesName = SpeciesName,
    //                 UsfSpeciesType = SpeciesType,
    //                 UsfUseCategory = UseCategory,
    //                 UsfFeatures = Features,
    //                 UsfLookAlikes = Lookalikes,
    //                 UsfHarvestMethod = HarvestMethod,
    //                 UsfTastesLike = TastesLike,
    //                 UsfDescription = Description
    //             };

    //         var userFindLocation = new UserFindLocation
    //             {
    //                 UslUsfId = userFind.UsFId,
    //                 UslLatitude = Latitude,
    //                 UslLongitude = Longitude
    //             };

    //         await userFindService.AddUserFind(userFind, userFindLocation);

    //         return new SaveFindResult
    //             {
    //                 UserFindId = userFind.UsFId,
    //                 UserFindLocationId = userFindLocation.UslId
    //             };
    //     }

    //     throw new InvalidOperationException("User is not authenticated.");
    // }



}


