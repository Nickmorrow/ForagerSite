@page "/map"

@using Newtonsoft.Json
@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService



<div id="map" style="height: 500px; width: 100%;"></div>

<div id="filters">
    <button size="100px" id="get-all-finds" class="bg-primary" @onclick="_GetAllFinds"></button>
    <button id="get-my-finds" class="bg-primary" @onclick="_GetMyFinds"></button>
    <button id="get-friends-finds" class="bg-primary"></button>
</div>

@code {

    private static Map _instance;

    private List<UserFindLocation> _userFindLocations;

    private List<UserFindsViewModel> _userFindsViewModels;

    private bool _currentUserFilter;

    private bool _allUserFilter;

    private bool _friendUserFilter;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = userStateService.CurrentUser.user;

            if (user != null)
            {
                var settings = new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        Formatting = Formatting.Indented
                    };

                _userFindsViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
                var json = JsonConvert.SerializeObject(_userFindsViewModels, settings);

                await _InitializeMap(json, user.UsrId);
            }
        }
    }

    private async Task _InitializeMap(string json, Guid currentUserId)
    {
        Console.WriteLine(json);
        await JSRuntime.InvokeVoidAsync("initializeMap", json, currentUserId.ToString());
    }

    private async Task _GetMyFinds()
    {
        var user = userStateService.CurrentUser.user;

        _currentUserFilter = true;
        _allUserFilter = false;

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };
        if (user != null)
        {
            _userFindsViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);
            var json = JsonConvert.SerializeObject(_userFindsViewModels, settings);

            await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString());
        }

    }

    private async Task _GetAllFinds()
    {
        _allUserFilter = true;
        _currentUserFilter = false;

        var user = userStateService.CurrentUser.user;

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };

        _userFindsViewModels = await userFindService.GetUserFindsViewModels();

        var json = JsonConvert.SerializeObject(_userFindsViewModels, settings);

        await JSRuntime.InvokeVoidAsync("initializeMap", json, user.UsrId.ToString());
    }


    [JSInvokable]
    public static async Task<UserFind> GetFindById(string findId)
    {
        if (string.IsNullOrEmpty(findId) || !Guid.TryParse(findId, out var guidId))
        {
            throw new ArgumentException($"Invalid GUID format, Received findId: {findId}");
        }

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        return await userFindService.GetFindById(guidId);
    }

    [JSInvokable]
    public static async Task<string> CreateFind(
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();

        var user = userStateService.CurrentUser.user;

        Guid userId = user.UsrId;

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        await userFindService.CreateFind(
            userId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng
        );              

        var updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

        return JsonConvert.SerializeObject(updatedViewModels, settings);
    }

    // [JSInvokable]
    // public static async Task<List<UserFindsViewModel>> UpdateFind(
    //     Guid findId,
    //     string name,
    //     string speciesName,
    //     string speciesType,
    //     string useCategory,
    //     string features,
    //     string lookalikes,
    //     string harvestMethod,
    //     string tastesLike,
    //     string description,
    //     double lat,
    //     double lng)
    // {
    //     var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();       
    //     var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
    //     var user = userStateService.CurrentUser.user;

    //     await userFindService.UpdateFind(
    //         findId,
    //         name,
    //         speciesName,
    //         speciesType,
    //         useCategory,
    //         features,
    //         lookalikes,
    //         harvestMethod,
    //         tastesLike,
    //         description,
    //         lat,
    //         lng
    //     );
    //     return await userFindService.GetUserFindsViewModels(user.UsrId);
    // }

    [JSInvokable]
    public static async Task<string> UpdateFind(
    string findId, 
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        Guid findGuid;
        if (Guid.TryParse(findId, out findGuid))
        {
            await userFindService.UpdateFind(
                findGuid,
                name,
                speciesName,
                speciesType,
                useCategory,
                features,
                lookalikes,
                harvestMethod,
                tastesLike,
                description,
                lat,
                lng
            );
            var updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);

            var settings = new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                };

            return JsonConvert.SerializeObject(updatedViewModels, settings);
        }
        else
        {
            throw new ArgumentException("Invalid GUID format", nameof(findId));
        }
    }


    [JSInvokable]
    public static async Task<string> DeleteFind(string findId)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        Guid findGuid;

        if (Guid.TryParse(findId, out findGuid))
            await userFindService.DeleteFind(findGuid);                              

        var updatedViewModels = await userFindService.GetUserFindsViewModels(user.UsrId);

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

        return JsonConvert.SerializeObject(updatedViewModels, settings);
    }




}


