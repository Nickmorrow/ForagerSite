@page "/map"

@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService

<div id="map" style="height: 500px; width: 100%;"></div>

@code {

    private static Map _instance;

    private List<UserFindLocation> userFindLocations;

    private List<UserFindsViewModel> userFindsViewModels;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = userStateService.CurrentUser.user;
           
            if (user != null)
            {

                userFindLocations = await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
                await InitializeMap(userFindLocations);
            }
        }
    }

    private async Task InitializeMap(List<UserFindLocation> findLocations)
    {
        await JSRuntime.InvokeVoidAsync("initializeMap", findLocations );
    }

    [JSInvokable]
    public static async Task<UserFind> GetFindById(string findId)
    {
        if (string.IsNullOrEmpty(findId) || !Guid.TryParse(findId, out var guidId))
        {
            throw new ArgumentException($"Invalid GUID format, Received findId: {findId}");
        }

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        return await userFindService.GetFindById(guidId);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> CreateFind(
    string name,
    string speciesName,
    string speciesType,
    string useCategory,
    string features,
    string lookalikes,
    string harvestMethod,
    string tastesLike,
    string description,
    double lat,
    double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();

        var user = userStateService.CurrentUser.user;

        Guid userId = user.UsrId;

        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        await userFindService.CreateFind(
            userId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng
        );              

        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> UpdateFind(
        Guid findId,
        string name,
        string speciesName,
        string speciesType,
        string useCategory,
        string features,
        string lookalikes,
        string harvestMethod,
        string tastesLike,
        string description,
        double lat,
        double lng)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();       
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        await userFindService.UpdateFind(
            findId,
            name,
            speciesName,
            speciesType,
            useCategory,
            features,
            lookalikes,
            harvestMethod,
            tastesLike,
            description,
            lat,
            lng
        );
        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
    }

    [JSInvokable]
    public static async Task<List<UserFindLocation>> DeleteFind(Guid findId)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();
        var user = userStateService.CurrentUser.user;

        await userFindService.DeleteFind(findId);
        return await userFindService.GetUserFindsAndLocationsAsync(user.UsrId);
    }




}


