@page "/map"

@using ForagerSite.Services
@using ForagerSite.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject UserStateService userStateService
@inject UserService userService
@inject UserFindService userFindService

<div id="map" style="height: 500px; width: 100%;"></div>

@code {
    private async Task InitializeMap()
    {
        await JSRuntime.InvokeVoidAsync("initializeMap");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
        }
    }  

    public class SaveFindResult
    {
        public Guid UserFindId { get; set; }
        public Guid UserFindLocationId { get; set; }
    }

    [JSInvokable]
    public static async Task<SaveFindResult> SaveFind(
           string Name,
           string SpeciesName,
           string SpeciesType,
           string UseCategory,
           string Features,
           string Lookalikes,
           string HarvestMethod,
           string TastesLike,
           string Description,
           float Latitude,
           float Longitude)
    {
        
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();

        if (userStateService == null || userFindService == null)
        {
            throw new InvalidOperationException("Services are not available.");
        }

        var user = userStateService.CurrentUser.user;

        if (user != null)
        {
            var userFind = new UserFind
                {
                    UsfName = Name,
                    UsfUsrId = user.UsrId,
                    UsfFindDate = DateTime.Now,
                    UsfSpeciesName = SpeciesName,
                    UsfSpeciesType = SpeciesType,
                    UsfUseCategory = UseCategory,
                    UsfFeatures = Features,
                    UsfLookAlikes = Lookalikes,
                    UsfHarvestMethod = HarvestMethod,
                    UsfTastesLike = TastesLike,
                    UsfDescription = Description
                };

            var userFindLocation = new UserFindLocation
                {
                    UslUsfId = userFind.UsFId,
                    UslLatitude = Latitude,
                    UslLongitude = Longitude
                };

            await userFindService.AddUserFind(userFind, userFindLocation);

            return new SaveFindResult
                {
                    UserFindId = userFind.UsFId,
                    UserFindLocationId = userFindLocation.UslId
                };
        }

        throw new InvalidOperationException("User is not authenticated.");
    }

    [JSInvokable]
    public static async Task EditFind(
        Guid userFindId,
        Guid userFindLocationId,
        string Name,
        string SpeciesName,
        string SpeciesType,
        string UseCategory,
        string Features,
        string Lookalikes,
        string HarvestMethod,
        string TastesLike,
        string Description,
        float Latitude,
        float Longitude)
    {
        var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
        var userFindService = ServiceLocator.ServiceProvider.GetService<UserFindService>();

        var user = userStateService.CurrentUser.user;

        if (user != null)
        {
            var userFind = new UserFind
                {
                    UsFId = userFindId,
                    UsfName = Name,
                    UsfUsrId = user.UsrId,                    
                    UsfSpeciesName = SpeciesName,
                    UsfSpeciesType = SpeciesType,
                    UsfUseCategory = UseCategory,
                    UsfFeatures = Features,
                    UsfLookAlikes = Lookalikes,
                    UsfHarvestMethod = HarvestMethod,
                    UsfTastesLike = TastesLike,
                    UsfDescription = Description
                };

            var userFindLocation = new UserFindLocation
                {
                    UslId = userFindLocationId,
                    UslUsfId = userFindId,
                    UslLatitude = Latitude,
                    UslLongitude = Longitude
                };

            await userFindService.UpdateUserFind(userFind, userFindLocation);
        }
    }

    // [JSInvokable]
    // public static string GetCurrentUsername()
    // {
    //     var userStateService = ServiceLocator.ServiceProvider.GetService<UserStateService>();
    //     var userService = ServiceLocator.ServiceProvider.GetService<UserService>();

    //     return userStateService.CurrentUser.user?.UsrName;
    // }

}


