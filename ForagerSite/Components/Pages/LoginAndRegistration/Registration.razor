@page "/Registration"
@using ForagerSite.Services;
@using ForagerSite.Models;
@inject UserService userService
@rendermode InteractiveServer
@inject NavigationManager navigationManager

<PageTitle>Registration</PageTitle>

<h3>Registration</h3>

<div>
    <EditForm Model="@userViewModel" OnValidSubmit="_HandleValidSubmit" FormName="userForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="NameInput">Name</label>
        <InputText id="NameInput" @bind-Value="@userViewModel.user.UsrName"></InputText>   

        <label for="EmailInput">Email</label>
        <InputText id="EmailInput" @bind-Value="@userViewModel.user.UsrEmail"></InputText>
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => userViewModel.user.UsrEmail)" />

        <label for="CountryInput">Country</label>
        <InputText id="CountryInput" @bind-Value="@userViewModel.user.UsrCountry"></InputText>

        <label for="StateInput">State or Province</label>
        <InputText id="StateInput" @bind-Value="@userViewModel.user.UsrStateorProvince"></InputText>

        <label for="UserNameInput">Username</label>
        <InputText id="UserNameInput" @bind-Value="@userViewModel.userSecurity.UssUsername"></InputText>
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => userViewModel.userSecurity.UssUsername)" />

        <label for="PasswordInput">Password</label>
        <InputText id="PasswordInput" @bind-Value="@userViewModel.userSecurity.UssPassword" type="@passwordInputType"></InputText>
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => userViewModel.userSecurity.UssPassword)" />

        <label for="ConfirmPasswordInput">Confirm Password</label>
        <InputText id="ConfirmPasswordInput" @bind-Value="@confirmPassword" type="@passwordInputType"></InputText>
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => confirmPassword)" />

        <input type="checkbox" id="ShowPassword" @bind="showPassword" />
        <label for="ShowPassword">Show Password</label>
        

        <button type="submit" class="btn-primary">Add</button>
    </EditForm>

    <NavLink href="/Login">Back</NavLink>

    @if (_errorMessage != null)
    {
        <p style="color: red;">@_errorMessage</p>
    }
</div>

@code {

    public UserViewModel userViewModel = new UserViewModel();

    private string confirmPassword;
    private bool showPassword;
    private string passwordInputType => showPassword ? "text" : "password";

    private string _errorMessage;

    private bool _userNameExists;

    private bool _userEmailExists;

    private async Task _HandleValidSubmit(EditContext editContext)
    {
        _errorMessage = null;
        _userNameExists = await userService.UsernameExists(userViewModel.userSecurity.UssUsername);
        _userEmailExists = await userService.EmailExists(userViewModel.user.UsrEmail);

        #region Validation Messages
        if (_userNameExists && _userEmailExists)
        {
            _errorMessage = "Username and Email already exist.";
            return;
        }
        if (_userNameExists)
        {
            _errorMessage = "Username already exists.";
            return;
        }
        if (_userEmailExists)
        {                          
            _errorMessage = "Email already exists.";
            return;
        }
        if (userViewModel.user.UsrEmail == null)
        {
            _errorMessage = "You must enter an Email address.";
            return;
        }
        if (userViewModel.userSecurity.UssUsername == null)
        {
            _errorMessage = "You must enter a username.";
            return;
        }
        if (userViewModel.userSecurity.UssPassword == null)
        {
            _errorMessage = "You must enter a password.";
            return;
        }
        if (confirmPassword == null)
        {
            _errorMessage = "Please confirm password.";
            return;
        }
        if (userViewModel.userSecurity.UssPassword != confirmPassword)
        {
            _errorMessage = "Passwords do not match.";
            return;
        }
        #endregion

        var newUser = (UserViewModel)editContext.Model;
        newUser.user.UsrJoinedDate = DateTime.Now;
        newUser.userSecurity.User = newUser.user;

        userService.AddUser(newUser.user, newUser.userSecurity);
        userViewModel = new UserViewModel();
        navigationManager.NavigateTo("/");
    }
}
